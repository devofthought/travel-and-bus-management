openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'Group project - travel and bus management services'
  description: ' In a world that thrives on connectivity and convenience, the transportation industry is at the forefront of transforming the way people travel. Welcome to “project name”, your ultimate solution for streamlined bus ticket booking and efficient bus agency management.'
  contact:
    name: Group project
    url: https://up-comming.com
    email: group@traver.com
servers:
  - description: Dev
    url: 'http://localhost:5000/api/v1'
tags:
  - name: Auth
    description: Authentication Endpoints (public)
  - name: Admin
    description: Admin dashboard Endpoints (admin only)
  - name: traveler
    description: traveler Endpoints (traveler only)
  - name: driver
    description: driver Endpoints (driver only)
  - name: trips
    description: trips Endpoints (public)
paths:
  '/auth/signup':
    post:
      description: create a new account
      tags: [Auth]
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Abdullah Alamin
                email:
                  type: string
                  format: email
                  example: alamin@example.com
                password:
                  type: string
                  format: password
                  example: PassWord123
              required: [name, email, password]
      responses:
        '201':
          description: Signup successul
          content:
            'application/json':
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Signup successful
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: '/auth/signup'
                      signin:
                        type: string
                        example: '/auth/signin'
        '400':
          $ref: '#/components/responses/400'
        '500':
          '$ref': '#/components/responses/500'
  '/auth/signin':
    post:
      description: Login to your account
      tags: [Auth]
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: alamin@example.com
                password:
                  type: string
                  format: password
                  example: PassWord123
              required: [email, password]
      responses:
        '200':
          description: Signin successul
          content:
            'application/json':
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Signin successful
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: '/auth/signin'
        '400':
          $ref: '#/components/responses/400'
        '500':
          '$ref': '#/components/responses/500'
  '/travelers/me':
    get:
      security:
        - bearerAuth: []
      tags: [traveler]
      description: Retrive a traveler's profile
      responses:
        '200':
          description: Return a traveler's profile
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int32
                              example: 1
                            name:
                              type: string
                              example: mr. kamal
                            image:
                              type: string
                              format: url
                              example: https://s3.aws.com/myfirstblog/124.jpg
                            email:
                              type: string
                              format: email
                              example: kamal@gmail.com
                            age: 
                              type: integer
                              format: int32
                              example: 25
                            phone: 
                              type: string
                              format: number
                              example: 019243677591
                        - $ref: '#/components/schemas/Timestamp'
        '400':
          $ref: '#/components/responses/400'
        '500':
          '$ref': '#/components/responses/500'
    put:
      operationId: Update traveler profile
      security:
        - bearerAuth: []
      tags: [traveler]
      description: updating traveler profile's 
      requestBody:
        description: To update traveler profile must need to provide valid data
        content:
          'application/json':
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: mr. kamal
                image:
                  type: string
                  format: url
                  example: https://s3.aws.com/myfirstblog/124.jpg
                email:
                  type: string
                  format: email
                  example: kamal@gmail.com
                age: 
                  type: integer
                  format: int32
                  example: 25
                phone: 
                  type: string
                  format: number
                  example: 019243677591
              required: ['']
      responses:
        '201':
          description: Successfully updating a traveler information
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/traverProfile'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    traverProfile:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 201
        message:
          type: string
          example: 'travler profile update successfully'
        data:
          $ref: '#/components/schemas/Travler'
        links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: '/travlers/me'
    Travler:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int32
              example: 1
            name:
              type: string
              example: mr. kamal
            image:
              type: string
              format: url
              example: https://s3.aws.com/myfirstblog/124.jpg
            email:
              type: string
              format: email
              example: kamal@gmail.com
            age: 
              type: integer
              format: int32
              example: 25
            phone: 
              type: string
              format: number
              example: 019243677591
          required: ['id', 'name', 'image', 'age', 'email', 'phone']
        - $ref: '#/components/schemas/Timestamp'
    Timestamp:
      type: object
      properties:
        createdAt:
          type: string
          format: datetime
        updatedAt:
          type: string
          format: datetime
      required: [createdAt, updatedAt]
    Pagination:
      type: object
      properties:
        page:
          type: integer
          format: int32
          example: 2
        limit:
          type: integer
          format: int32
          example: 10
        next:
          type: integer
          format: int32
          example: 3
        prev:
          type: integer
          format: int32
          example: 1
        totalPage:
          type: integer
          format: int32
          example: 5
        totalItems:
          type: integer
          format: int32
          example: 50
      required:
        - page
        - limit
        - totalPage
        - totalItems
  responses:
    '500':
      description: 'Internal Server Error'
      content:
        'application/json':
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 500
              error:
                type: string
                example: Internal Server Error
              message:
                type: string
                example: We are sorry for the inconvenience. Please try again later
    '400':
      description: 'Bad Request'
      content:
        'application/json':
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 400
              error:
                type: string
                example: Bad Request
              data:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: email
                    message:
                      type: string
                      example: Invalid email
                    in:
                      type: string
                      enum: [query, body]
                      example: body
    '401':
      description: Unauthorized
      content:
        'application/json':
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 401
              error:
                type: string
                example: Unauthorized
              message:
                type: string
                example: You don't have the right permissions
    '404':
      description: Resource Not Found
      content:
        'application/json':
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 404
              error:
                type: string
                example: Not Found
              message:
                type: string
                example: Requested resource not found
  parameters:
    pageParam:
      in: query
      name: page
      description: current page number
      schema:
        type: integer
        format: int32
        example: 2
    limitParam:
      in: query
      name: limit
      description: maximum items to be returned
      schema:
        type: integer
        format: int32
        example: 10
    sortTypeParam:
      in: query
      name: sort_type
      description: type of sort (asc or dsc)
      schema:
        type: string
        enum: [asc, dsc]
        example: dsc
    sortByParam:
      in: query
      name: sort_by
      description: Sort key
      schema:
        type: string
        example: updatedAt
    searchParam:
      in: query
      name: search
      description: Search term
      schema:
        type: string
        example: title
    idPathParam:
      in: path
      name: id
      required: true
      description: Article ID
      schema:
        type: integer
        format: int32
        example: 1
